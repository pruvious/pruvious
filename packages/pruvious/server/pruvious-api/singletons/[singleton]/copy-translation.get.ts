import {
  __,
  assertQuery,
  getSingletonFromEvent,
  guardedSelectSingleton,
  isValidLanguageCode,
  type LanguageCode,
  primaryLanguage,
  pruviousError,
} from '#pruvious/server'
import { isEmpty, isString } from '@pruvious/utils'
import { isDevelopment } from 'std-env'

export default defineEventHandler(async (event) => {
  const singleton = await getSingletonFromEvent()
  const { language, targetLanguage } = getQuery(event)
  const sourceLanguage = isString(language) ? language.trim() : primaryLanguage

  if (!singleton.definition.api.read) {
    throw pruviousError(event, {
      statusCode: 404,
      message: isDevelopment
        ? 'To enable API access for this singleton, set `api.read: true` in your singleton definition'
        : __('pruvious-api', 'Singleton not found'),
    })
  }

  if (!singleton.definition.translatable) {
    throw pruviousError(event, {
      statusCode: 404,
      message: isDevelopment ? 'This singleton is not translatable' : __('pruvious-api', 'Singleton not found'),
    })
  }

  if (!singleton.definition.copyTranslation) {
    throw pruviousError(event, {
      statusCode: 404,
      message: isDevelopment
        ? 'To enable translation copying for this singleton, define a `copyTranslation` function in your singleton definition'
        : __('pruvious-api', 'Singleton not found'),
    })
  }

  if (!targetLanguage) {
    throw pruviousError(event, {
      statusCode: 400,
      message: __('pruvious-api', 'The `$param` parameter is required', { param: 'targetLanguage' }),
    })
  } else if (!isValidLanguageCode(targetLanguage)) {
    throw pruviousError(event, {
      statusCode: 400,
      message: __('pruvious-api', 'The `$param` parameter must be a string', { param: 'targetLanguage' }),
    })
  } else if (!isValidLanguageCode(targetLanguage)) {
    throw pruviousError(event, {
      statusCode: 400,
      message: __('pruvious-api', 'The language `$language` is not supported', { language: String(targetLanguage) }),
    })
  } else if (sourceLanguage === targetLanguage) {
    throw pruviousError(event, {
      statusCode: 400,
      message: __('pruvious-api', 'The source and target languages must be different'),
    })
  }

  const query = await guardedSelectSingleton(singleton.name).fromQueryString(event.path).get()

  assertQuery(query)

  if (isEmpty(query.data)) {
    throw pruviousError(event, {
      statusCode: 404,
      message: __('pruvious-api', 'Resource not found'),
    })
  }

  const copy = await singleton.definition.copyTranslation({
    source: query.data as any,
    sourceLanguage: sourceLanguage as LanguageCode,
    targetLanguage: targetLanguage as LanguageCode,
  })

  for (const [fieldName, { autoGenerated, immutable }] of Object.entries(singleton.definition.fields)) {
    if (autoGenerated || immutable) {
      delete copy[fieldName]
    }
  }

  delete copy.id

  return copy
})
