import {
  __,
  assertQuery,
  getCollectionFromEvent,
  guardedSelectFrom,
  isValidLanguageCode,
  type LanguageCode,
  pruviousError,
} from '#pruvious/server'
import { isEmpty, isPositiveInteger } from '@pruvious/utils'
import { isDevelopment } from 'std-env'

export default defineEventHandler(async (event) => {
  const collection = await getCollectionFromEvent()
  const idParam = Number(getRouterParam(event, 'id')?.match(/^[1-9]\d*$/)?.[0] ?? '')
  const { targetLanguage, operation } = getQuery(event)

  if (!collection.definition.meta.api.read) {
    throw pruviousError(event, {
      statusCode: 404,
      message: isDevelopment
        ? 'To enable API access for this collection, set `api.read: true` in your collection definition'
        : __('pruvious-api', 'Collection not found'),
    })
  }

  if (!collection.definition.meta.translatable) {
    throw pruviousError(event, {
      statusCode: 404,
      message: isDevelopment ? 'This collection is not translatable' : __('pruvious-api', 'Collection not found'),
    })
  }

  if (!collection.definition.meta.copyTranslation) {
    throw pruviousError(event, {
      statusCode: 404,
      message: isDevelopment
        ? 'To enable translation copying for this collection, define a `copyTranslation` function in your collection definition'
        : __('pruvious-api', 'Collection not found'),
    })
  }

  if (!isPositiveInteger(idParam)) {
    throw pruviousError(event, {
      statusCode: 404,
      message: isDevelopment ? 'The `:id` route parameter must be a positive integer' : undefined,
    })
  }

  if (!targetLanguage) {
    throw pruviousError(event, {
      statusCode: 400,
      message: __('pruvious-api', 'The `$param` parameter is required', { param: 'targetLanguage' }),
    })
  } else if (!isValidLanguageCode(targetLanguage)) {
    throw pruviousError(event, {
      statusCode: 400,
      message: __('pruvious-api', 'The `$param` parameter must be a string', { param: 'targetLanguage' }),
    })
  } else if (!isValidLanguageCode(targetLanguage)) {
    throw pruviousError(event, {
      statusCode: 400,
      message: __('pruvious-api', 'The language `$language` is not supported', { language: String(targetLanguage) }),
    })
  }

  if (!operation) {
    throw pruviousError(event, {
      statusCode: 400,
      message: __('pruvious-api', 'The `$param` parameter is required', { param: 'operation' }),
    })
  } else if (operation !== 'create' && operation !== 'update') {
    throw pruviousError(event, {
      statusCode: 400,
      message: __('pruvious-api', 'Invalid `$param` value. Must be one of: $values', {
        param: 'operation',
        values: "'create', 'update'",
      }),
    })
  }

  const query = await guardedSelectFrom(collection.name)
    .fromQueryString(event.path, { where: false, groupBy: false, orderBy: false, limit: false, offset: false })
    .where('id', '=', idParam)
    .first()

  assertQuery(query)

  if (isEmpty(query.data)) {
    throw pruviousError(event, {
      statusCode: 404,
      message: __('pruvious-api', 'Resource not found'),
    })
  }

  if (!isValidLanguageCode(query.data!.language)) {
    throw pruviousError(event, {
      statusCode: 404,
      message: isDevelopment ? 'Invalid `language` field value of the source translation' : undefined,
    })
  } else if (query.data!.language === targetLanguage) {
    throw pruviousError(event, {
      statusCode: 400,
      message: __('pruvious-api', 'The source and target languages must be different'),
    })
  }

  const copy: Record<string, any> = await collection.definition.meta.copyTranslation({
    source: query.data as any,
    sourceLanguage: query.data.language,
    targetLanguage: targetLanguage as LanguageCode,
    operation,
  })

  for (const [fieldName, { autoGenerated, immutable }] of Object.entries(collection.definition.fields)) {
    if (autoGenerated || (immutable && operation === 'update')) {
      delete copy[fieldName]
    }
  }

  delete copy.id
  copy.language = targetLanguage
  copy.translations = query.data.translations

  return copy
})
