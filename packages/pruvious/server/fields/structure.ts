import { defineField, type CombinedFieldOptions, type GenericDatabase } from '#pruvious/server'
import {
  arrayFieldModel,
  Field,
  type ArrayFieldModelOptions,
  type ConditionalLogic,
  type ExtractCastedTypes,
  type ExtractPopulatedTypes,
  type FieldModel,
  type GenericField,
  type SubfieldsInput,
} from '@pruvious/orm'
import type { PropType } from 'vue'

interface CustomOptions<TItems extends { [$key: string]: Record<string, GenericField> }> {
  /**
   * A map of key-value objects with `Field` instances describing each item of this structure.
   *
   * - Map keys represent the unique item identifiers (keys).
   *   - The key will be included in the item object as the `$key` property.
   * - Map values are objects with subfield definitions.
   *   - Subfield object keys represent the subfield names.
   *   - Subfield object values are instances of the `Field` class.
   *
   * @example
   * ```ts
   * {
   *   image: {
   *     src: textField({}),
   *     alt: textField({}),
   *   },
   *   video: {
   *     src: videoField({}),
   *     autoplay: switchField({}),
   *   },
   * }
   *
   * // Example value:
   * [
   *   { $key: 'image', src: 'https://example.com/image.jpg', alt: 'An image' },
   *   { $key: 'video', src: 'https://example.com/video.mp4', autoplay: true },
   * ]
   * ```
   */
  items: TItems
}

type _ExtractCastedTypes<T extends { [$key: string]: Record<string, GenericField> }> = {
  [K1 in keyof T]: { $key: K1 } & ExtractCastedTypes<T[K1]>
}[keyof T]

type _ExtractPopulatedTypes<T extends { [$key: string]: Record<string, GenericField> }> = {
  [K1 in keyof T]: { $key: K1 } & ExtractPopulatedTypes<T[K1]>
}[keyof T]

type ExtractInput<T extends { [$key: string]: Record<string, GenericField> }> = {
  [K1 in keyof T]: { $key: K1 } & { [K2 in keyof T[K1]]: SubfieldsInput<T[K1]>[] }
}[keyof T][]

type ExtractClientItems<T extends { [$key: string]: Record<string, { field: GenericField }> }> = {
  [K1 in keyof T]: { [K2 in keyof T[K1]]: T[K1][K2]['field'] }
}

const customOptions: CustomOptions<{ [$key: string]: Record<string, GenericField> }> = {
  items: {},
}

export default {
  /**
   * Creates a new `Field` instance.
   *
   * This function is intended for server-side use in collection definitions.
   * For client-side usage, import the equivalent function from `#pruvious/client`.
   */
  serverFn: function <
    const TRequired extends boolean | undefined,
    const TImmutable extends boolean | undefined,
    const TAutoGenerated extends boolean | undefined,
    TConditionalLogic extends ConditionalLogic | undefined,
    TItems extends { [$key: string]: Record<string, GenericField> },
    TCastedType = _ExtractCastedTypes<TItems>[],
    TPopulatedType = _ExtractPopulatedTypes<TItems>[],
  >(
    options: CombinedFieldOptions<
      FieldModel<
        ArrayFieldModelOptions<TCastedType, TPopulatedType>,
        'text',
        TCastedType,
        TPopulatedType,
        ExtractInput<TItems>,
        undefined
      >,
      ArrayFieldModelOptions<TCastedType, TPopulatedType> & CustomOptions<TItems>,
      false,
      TRequired,
      TImmutable,
      TAutoGenerated,
      TConditionalLogic,
      GenericDatabase
    >,
  ): Field<
    FieldModel<
      ArrayFieldModelOptions<TCastedType, TPopulatedType>,
      'text',
      TCastedType,
      TPopulatedType,
      ExtractInput<TItems>,
      undefined
    >,
    ArrayFieldModelOptions<TCastedType, TPopulatedType> & CustomOptions<TItems>,
    false,
    TRequired,
    TImmutable,
    TAutoGenerated,
    TConditionalLogic,
    GenericDatabase
  > {
    const bound = defineField({
      model: arrayFieldModel(), // @todo need custom object[] model
      // @todo sanitizers (check repeaterFieldModel)
      // @todo validators (check repeaterFieldModel)
      // @todo inputFilters (check repeaterFieldModel)
      // @todo populator (check repeaterFieldModel)
      customOptions: { ...customOptions, ui: { dataTable: false } },
      castedTypeFn: () =>
        `(${Object.entries(options.items)
          .map(
            ([key, item]) =>
              `{ $key: '${key}', ${Object.entries(item)
                .map(([subfieldName, subfield]) => `${subfieldName}: ${(subfield as any).castedTypeFn(subfield)}`)
                .join(', ')} }`,
          )
          .join(' | ')})[]`,
      populatedTypeFn: () =>
        `(${Object.entries(options.items)
          .map(
            ([key, item]) =>
              `{ $key: '${key}', ${Object.entries(item)
                .map(([subfieldName, subfield]) => `${subfieldName}: ${(subfield as any).populatedTypeFn(subfield)}`)
                .join(', ')} }`,
          )
          .join(' | ')})[]`,
    }).serverFn.bind(this)
    return bound(options as any) as any
  },

  /**
   * Creates a new `Field` instance.
   *
   * This function is intended for client-side use in Vue components.
   * For server-side usage, import the equivalent function from `#pruvious/server`.
   */
  clientFn: function <
    const TRequired extends boolean | undefined,
    const TImmutable extends boolean | undefined,
    const TAutoGenerated extends boolean | undefined,
    TConditionalLogic extends ConditionalLogic | undefined,
    const TClienTItems extends { [$key: string]: Record<string, { field: GenericField }> },
    const TItems extends { [$key: string]: Record<string, GenericField> } = ExtractClientItems<TClienTItems>,
    TCastedType = _ExtractCastedTypes<TItems>[],
    TPopulatedType = _ExtractPopulatedTypes<TItems>[],
  >(
    options: CombinedFieldOptions<
      FieldModel<
        ArrayFieldModelOptions<TCastedType, TPopulatedType>,
        'text',
        TCastedType,
        TPopulatedType,
        ExtractInput<TItems>,
        undefined
      >,
      ArrayFieldModelOptions<TCastedType, TPopulatedType> &
        // @ts-expect-error
        CustomOptions<TClienTItems>,
      false,
      TRequired,
      TImmutable,
      TAutoGenerated,
      TConditionalLogic,
      GenericDatabase
    >,
  ): { type: PropType<TPopulatedType>; required: true } & {
    field: Field<
      FieldModel<
        ArrayFieldModelOptions<TCastedType, TPopulatedType>,
        'text',
        TCastedType,
        TPopulatedType,
        ExtractInput<TItems>,
        undefined
      >,
      ArrayFieldModelOptions<TCastedType, TPopulatedType> &
        // @ts-expect-error
        CustomOptions<TClienTItems>,
      false,
      TRequired,
      TImmutable,
      TAutoGenerated,
      TConditionalLogic,
      GenericDatabase
    >
  } {
    return null as any
  },

  /**
   * Represents the type structure for this field's configuration options.
   *
   * Note: This is a TypeScript type assertion and does not involve any runtime logic or data.
   */
  TOptions: undefined as unknown as CombinedFieldOptions<
    FieldModel<
      ArrayFieldModelOptions<Record<string, any>, Record<string, any>>,
      'text',
      Record<string, any>,
      Record<string, any>,
      ExtractInput<{ [$key: string]: Record<string, GenericField> }>,
      Record<string, GenericField>
    >,
    ArrayFieldModelOptions<Record<string, any>, Record<string, any>> &
      CustomOptions<{ [$key: string]: Record<string, GenericField> }>,
    false,
    boolean,
    boolean,
    boolean,
    ConditionalLogic | undefined,
    GenericDatabase
  >,
}
