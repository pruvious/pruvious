import { defineField, type CombinedFieldOptions, type GenericDatabase } from '#pruvious/server'
import {
  Field,
  repeaterFieldModel,
  type ConditionalLogic,
  type ExtractCastedTypes,
  type ExtractPopulatedTypes,
  type FieldModel,
  type GenericField,
  type RepeaterFieldModelOptions,
  type SubfieldsInput,
} from '@pruvious/orm'
import type { PropType } from 'vue'

interface CustomOptions<TSubfields extends Record<string, GenericField>> {
  /**
   * A key-value object of `Field` instances describing each property of the repeater array items.
   *
   * - Object keys represent the subfield names.
   * - Object values are instances of the `Field` class.
   *
   * @example
   * ```ts
   * {
   *   label: textField({}),
   *   link: linkField({}),
   * }
   *
   * // Example value:
   * [
   *   { label: 'Home', link: '/' },       // @todo update `link` value to be a `Link` instance
   *   { label: 'About', link: '/about' }, // @todo update `link` value to be a `Link` instance
   *   // ...
   * ]
   * ```
   */
  subfields: TSubfields
}

type ExtractClientSubfields<T extends Record<string, { field: GenericField }>> = {
  [K in keyof T]: T[K]['field']
}

const customOptions: CustomOptions<Record<string, GenericField>> = {
  subfields: {},
}

export default {
  /**
   * Creates a new `Field` instance.
   *
   * This function is intended for server-side use in collection definitions.
   * For client-side usage, import the equivalent function from `#pruvious/client`.
   */
  serverFn: function <
    const TRequired extends boolean | undefined,
    const TImmutable extends boolean | undefined,
    const TAutoGenerated extends boolean | undefined,
    TConditionalLogic extends ConditionalLogic | undefined,
    TSubfields extends Record<string, GenericField>,
    TCastedType = ExtractCastedTypes<TSubfields>[],
    TPopulatedType = ExtractPopulatedTypes<TSubfields>[],
  >(
    options: CombinedFieldOptions<
      FieldModel<
        RepeaterFieldModelOptions<TCastedType, TPopulatedType>,
        'text',
        TCastedType,
        TPopulatedType,
        SubfieldsInput<TSubfields>[],
        TSubfields
      >,
      RepeaterFieldModelOptions<TCastedType, TPopulatedType> & CustomOptions<TSubfields>,
      false,
      TRequired,
      TImmutable,
      TAutoGenerated,
      TConditionalLogic,
      GenericDatabase
    >,
  ): Field<
    FieldModel<
      RepeaterFieldModelOptions<TCastedType, TPopulatedType>,
      'text',
      TCastedType,
      TPopulatedType,
      SubfieldsInput<TSubfields>[],
      TSubfields
    >,
    RepeaterFieldModelOptions<TCastedType, TPopulatedType> & CustomOptions<TSubfields>,
    false,
    TRequired,
    TImmutable,
    TAutoGenerated,
    TConditionalLogic,
    GenericDatabase
  > {
    const bound = defineField({
      model: repeaterFieldModel(options.subfields),
      customOptions: { ...customOptions, ui: { dataTable: false } },
      castedTypeFn: () =>
        `{ ${Object.entries(options.subfields)
          .map(([subfieldName, subfield]) => `${subfieldName}: ${(subfield as any).castedTypeFn(subfield)}`)
          .join(', ')} }[]`,
      populatedTypeFn: () =>
        `{ ${Object.entries(options.subfields)
          .map(([subfieldName, subfield]) => `${subfieldName}: ${(subfield as any).populatedTypeFn(subfield)}`)
          .join(', ')} }[]`,
    }).serverFn.bind(this)
    return bound(options as any) as any
  },

  /**
   * Creates a new `Field` instance.
   *
   * This function is intended for client-side use in Vue components.
   * For server-side usage, import the equivalent function from `#pruvious/server`.
   */
  clientFn: function <
    const TRequired extends boolean | undefined,
    const TImmutable extends boolean | undefined,
    const TAutoGenerated extends boolean | undefined,
    TConditionalLogic extends ConditionalLogic | undefined,
    TClientSubfields extends Record<string, { field: GenericField }>,
    TSubfields extends Record<string, GenericField> = ExtractClientSubfields<TClientSubfields>,
    TCastedType = ExtractCastedTypes<TSubfields>[],
    TPopulatedType = ExtractPopulatedTypes<TSubfields>[],
  >(
    options: CombinedFieldOptions<
      FieldModel<
        RepeaterFieldModelOptions<TCastedType, TPopulatedType>,
        'text',
        TCastedType,
        TPopulatedType,
        SubfieldsInput<TSubfields>[],
        TSubfields
      >,
      RepeaterFieldModelOptions<TCastedType, TPopulatedType> &
        // @ts-expect-error
        CustomOptions<TClientSubfields>,
      false,
      TRequired,
      TImmutable,
      TAutoGenerated,
      TConditionalLogic,
      GenericDatabase
    >,
  ): { type: PropType<TPopulatedType>; required: true } & {
    field: Field<
      FieldModel<
        RepeaterFieldModelOptions<TCastedType, TPopulatedType>,
        'text',
        TCastedType,
        TPopulatedType,
        SubfieldsInput<TSubfields>[],
        TSubfields
      >,
      RepeaterFieldModelOptions<TCastedType, TPopulatedType> &
        // @ts-expect-error
        CustomOptions<TClientSubfields>,
      false,
      TRequired,
      TImmutable,
      TAutoGenerated,
      TConditionalLogic,
      GenericDatabase
    >
  } {
    return null as any
  },

  /**
   * Represents the type structure for this field's configuration options.
   *
   * Note: This is a TypeScript type assertion and does not involve any runtime logic or data.
   */
  TOptions: undefined as unknown as CombinedFieldOptions<
    FieldModel<
      RepeaterFieldModelOptions<Record<string, any>, Record<string, any>>,
      'text',
      Record<string, any>,
      Record<string, any>,
      SubfieldsInput<Record<string, GenericField>>[],
      Record<string, GenericField>
    >,
    RepeaterFieldModelOptions<Record<string, any>, Record<string, any>> & CustomOptions<Record<string, GenericField>>,
    false,
    boolean,
    boolean,
    boolean,
    ConditionalLogic | undefined,
    GenericDatabase
  >,
}
