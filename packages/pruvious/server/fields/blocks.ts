import {
  defineField,
  type BlockName,
  type CombinedFieldOptions,
  type DynamicBlockFieldTypes,
  type GenericDatabase,
  type ResolveFieldUIOptions,
  type TranslatableStringCallbackContext,
} from '#pruvious/server'
import { Field, type ConditionalLogic, type FieldModel, type GenericField } from '@pruvious/orm'
import type { PropType } from 'vue'
import { blockFieldModel, type BlockFieldModelOptions } from '../../modules/pruvious/blocks/blocksFieldModel'

interface CustomOptions {
  ui?: {
    /**
     * Sets the label for the "Add block" button.
     *
     * You can either provide a string or a function that returns a string.
     * The function receives an object with `_` and `__` properties to access the translation functions.
     *
     * Important: When using a function, only use simple anonymous functions without context binding,
     * since the option needs to be serialized for client-side use.
     *
     * @example
     * ```ts
     * // String (non-translatable)
     * label: 'Add image'
     *
     * // Function (translatable)
     * label: ({ __ }) => __('pruvious-dashboard', 'Add image')
     * ```
     *
     * @default
     * ({ __ }) => __('pruvious-dashboard', 'Add block')
     */
    addBlockLabel?: string | ((context: TranslatableStringCallbackContext) => string)
  }
}

const customOptions: CustomOptions = {
  ui: {
    addBlockLabel: ({ __ }) => __('pruvious-dashboard', 'Add block'),
  },
}

export default {
  /**
   * Creates a new `Field` instance.
   *
   * This function is intended for server-side use in collection definitions.
   * For client-side usage, import the equivalent function from `#pruvious/client`.
   */
  serverFn: function <
    const TRequired extends boolean | undefined,
    const TImmutable extends boolean | undefined,
    const TAutoGenerated extends boolean | undefined,
    TConditionalLogic extends ConditionalLogic | undefined,
  >(
    options: CombinedFieldOptions<
      FieldModel<
        BlockFieldModelOptions,
        'text',
        DynamicBlockFieldTypes['Casted'][BlockName][],
        DynamicBlockFieldTypes['Populated'][BlockName][],
        DynamicBlockFieldTypes['Input'][BlockName][],
        undefined,
        { [$key in BlockName]: Record<string, GenericField> }
      >,
      BlockFieldModelOptions & ResolveFieldUIOptions<undefined> & CustomOptions,
      false,
      TRequired,
      TImmutable,
      TAutoGenerated,
      TConditionalLogic,
      GenericDatabase
    >,
  ): Field<
    FieldModel<
      BlockFieldModelOptions,
      'text',
      DynamicBlockFieldTypes['Casted'][BlockName][],
      DynamicBlockFieldTypes['Populated'][BlockName][],
      DynamicBlockFieldTypes['Input'][BlockName][],
      undefined,
      { [$key in BlockName]: Record<string, GenericField> }
    >,
    BlockFieldModelOptions & ResolveFieldUIOptions<undefined> & CustomOptions,
    false,
    TRequired,
    TImmutable,
    TAutoGenerated,
    TConditionalLogic,
    GenericDatabase
  > {
    const bound = defineField({
      model: blockFieldModel(),
      customOptions,
      castedTypeFn: () => `DynamicBlockFieldTypes['Casted'][BlockName][]`,
      populatedTypeFn: () => `DynamicBlockFieldTypes['Populated'][BlockName][]`,
      inputTypeFn: () => `DynamicBlockFieldTypes['Input'][BlockName][]`,
    }).serverFn.bind(this)
    return bound(options as any) as any
  },

  /**
   * Creates a new `Field` instance.
   *
   * This function is intended for client-side use in Vue components.
   * For server-side usage, import the equivalent function from `#pruvious/server`.
   */
  clientFn: function <
    const TRequired extends boolean | undefined,
    const TImmutable extends boolean | undefined,
    const TAutoGenerated extends boolean | undefined,
    TConditionalLogic extends ConditionalLogic | undefined,
  >(
    options: CombinedFieldOptions<
      FieldModel<
        BlockFieldModelOptions,
        'text',
        DynamicBlockFieldTypes['Casted'][BlockName][],
        DynamicBlockFieldTypes['Populated'][BlockName][],
        DynamicBlockFieldTypes['Input'][BlockName][],
        undefined,
        { [$key in BlockName]: Record<string, GenericField> }
      >,
      BlockFieldModelOptions & ResolveFieldUIOptions<undefined> & CustomOptions,
      false,
      TRequired,
      TImmutable,
      TAutoGenerated,
      TConditionalLogic,
      GenericDatabase
    >,
  ): { type: PropType<DynamicBlockFieldTypes['Populated'][BlockName][]>; required: true } & {
    field: Field<
      FieldModel<
        BlockFieldModelOptions,
        'text',
        DynamicBlockFieldTypes['Casted'][BlockName][],
        DynamicBlockFieldTypes['Populated'][BlockName][],
        DynamicBlockFieldTypes['Input'][BlockName][],
        undefined,
        { [$key in BlockName]: Record<string, GenericField> }
      >,
      BlockFieldModelOptions & ResolveFieldUIOptions<undefined> & CustomOptions,
      false,
      TRequired,
      TImmutable,
      TAutoGenerated,
      TConditionalLogic,
      GenericDatabase
    >
  } {
    return null as any
  },

  /**
   * Represents the type structure for this field's configuration options.
   *
   * Note: This is a TypeScript type assertion and does not involve any runtime logic or data.
   */
  TOptions: undefined as unknown as CombinedFieldOptions<
    FieldModel<
      BlockFieldModelOptions,
      'text',
      DynamicBlockFieldTypes['Casted'][BlockName][],
      DynamicBlockFieldTypes['Populated'][BlockName][],
      DynamicBlockFieldTypes['Input'][BlockName][],
      undefined,
      { [$key in BlockName]: Record<string, GenericField> }
    >,
    BlockFieldModelOptions & ResolveFieldUIOptions<undefined> & CustomOptions,
    false,
    boolean,
    boolean,
    boolean,
    ConditionalLogic | undefined,
    GenericDatabase
  >,
}
