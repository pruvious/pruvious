import {
  type CombinedFieldOptions,
  defineField,
  type GenericDatabase,
  type ResolveFieldUIOptions,
  type TranslatableStringCallback,
} from '#pruvious/server'
import {
  type ConditionalLogic,
  type Field,
  type FieldModel,
  textFieldModel,
  type TextFieldModelOptions,
} from '@pruvious/orm'
import type { ExtractValues } from '@pruvious/utils'
import type { PropType } from 'vue'

export interface SelectChoice {
  /**
   * An optional label to display in the UI for this choice.
   * If not provided, the `value` will be displayed instead.
   *
   * You can provide either a string or a callback function that returns a string.
   *
   * @example
   * ```ts
   * // Using a string
   * label: 'Yes'
   *
   * // Using a callback
   * label: ({ __ }) => __('pruvious-dashboard', 'Yes')
   * ```
   */
  label?: string | TranslatableStringCallback

  /**
   * Unique string identifier for this choice.
   * This value is stored in the database and returned when the field is selected.
   */
  value: string
}

export interface SelectChoiceGroup {
  /**
   * Text that describes a group of selectable options.
   * This label is used to organize and categorize related choices.
   *
   * You can provide either a string or a callback function that returns a string.
   *
   * @example
   * ```ts
   * // Using a string
   * label: 'Colors'
   *
   * // Using a callback
   * label: ({ __ }) => __('pruvious-dashboard', 'Colors')
   * ```
   */
  group: string

  /**
   * An array of choices that will be shown in the group.
   * Each choice requires a unique `value` that must be distinct across all groups and choices.
   *
   * @example
   * ```ts
   * choices: [
   *   { label: 'Red', value: 'red' },
   *   { label: 'Green', value: 'green' },
   *   { label: 'Blue', value: 'blue' },
   * ]
   * ```
   */
  choices: SelectChoice[]
}

interface CustomOptions<TChoices extends (SelectChoice | SelectChoiceGroup)[]> {
  /**
   * The choices available for the select field.
   * Each choice must have a unique `value`.
   *
   * @example
   * ```ts
   * choices: [
   *   { label: 'Yes', value: 'yes' },
   *   { label: 'No', value: 'no' },
   * ]
   * ```
   */
  choices: TChoices
}

const customOptions: CustomOptions<(SelectChoice | SelectChoiceGroup)[]> = {
  choices: [],
}

export default {
  /**
   * Creates a new `Field` instance.
   *
   * This function is intended for server-side use in collection definitions.
   * For client-side usage, import the equivalent function from `#pruvious/client`.
   */
  serverFn: function <
    const TRequired extends boolean | undefined,
    const TImmutable extends boolean | undefined,
    const TAutoGenerated extends boolean | undefined,
    TConditionalLogic extends ConditionalLogic | undefined,
    const TChoices extends (SelectChoice | SelectChoiceGroup)[],
    const TValues extends ExtractValues<TChoices> = ExtractValues<TChoices>, // @todo flatten SelectChoiceGroup (test with `default` value)
  >(
    options: Omit<
      CombinedFieldOptions<
        FieldModel<TextFieldModelOptions<TValues, TValues>, 'text', TValues, TValues, TValues, undefined, undefined>,
        TextFieldModelOptions<TValues, TValues> &
          CustomOptions<TChoices> &
          ResolveFieldUIOptions<{ placeholder: true }>,
        false,
        TRequired,
        TImmutable,
        TAutoGenerated,
        TConditionalLogic,
        GenericDatabase
      >,
      'allowEmptyString' | 'maxLength' | 'minLength' | 'trim'
    >,
  ): Field<
    FieldModel<TextFieldModelOptions<TValues, TValues>, 'text', TValues, TValues, TValues, undefined, undefined>,
    TextFieldModelOptions<TValues, TValues> & CustomOptions<TChoices> & ResolveFieldUIOptions<{ placeholder: true }>,
    false,
    TRequired,
    TImmutable,
    TAutoGenerated,
    TConditionalLogic,
    GenericDatabase
  > {
    const flattenedChoices = options.choices.flatMap((choice) => ('value' in choice ? [choice] : choice.choices))

    const bound = defineField({
      model: textFieldModel(),
      default: flattenedChoices[0]?.value,
      validators: [
        (value, { context }) => {
          if (!flattenedChoices.some((choice) => choice.value === value)) {
            throw new Error(context.__('pruvious-orm', 'Invalid value'))
          }
        },
      ],
      customOptions: { ...customOptions, trim: false },
      uiOptions: { placeholder: true },
      omitOptions: ['allowEmptyString', 'maxLength', 'minLength', 'trim'],
      castedTypeFn: () => flattenedChoices.map((choice) => `'${choice.value.replaceAll("'", "\\'")}'`).join(' | '),
      populatedTypeFn: () => flattenedChoices.map((choice) => `'${choice.value.replaceAll("'", "\\'")}'`).join(' | '),
      inputTypeFn: () => flattenedChoices.map((choice) => `'${choice.value.replaceAll("'", "\\'")}'`).join(' | '),
    }).serverFn.bind(this)
    return bound(options as any) as any
  },

  /**
   * Creates a new `Field` instance.
   *
   * This function is intended for client-side use in Vue components.
   * For server-side usage, import the equivalent function from `#pruvious/server`.
   */
  clientFn: function <
    const TRequired extends boolean | undefined,
    const TImmutable extends boolean | undefined,
    const TAutoGenerated extends boolean | undefined,
    TConditionalLogic extends ConditionalLogic | undefined,
    const TChoices extends (SelectChoice | SelectChoiceGroup)[],
    const TValues extends ExtractValues<TChoices> = ExtractValues<TChoices>,
  >(
    options: Omit<
      CombinedFieldOptions<
        FieldModel<TextFieldModelOptions<TValues, TValues>, 'text', TValues, TValues, TValues, undefined, undefined>,
        TextFieldModelOptions<TValues, TValues> &
          CustomOptions<TChoices> &
          ResolveFieldUIOptions<{ placeholder: true }>,
        false,
        TRequired,
        TImmutable,
        TAutoGenerated,
        TConditionalLogic,
        GenericDatabase
      >,
      'allowEmptyString' | 'maxLength' | 'minLength' | 'trim'
    >,
  ): { type: PropType<TValues>; required: true } & {
    field: Field<
      FieldModel<TextFieldModelOptions<TValues, TValues>, 'text', TValues, TValues, TValues, undefined, undefined>,
      TextFieldModelOptions<TValues, TValues> & CustomOptions<TChoices> & ResolveFieldUIOptions<{ placeholder: true }>,
      false,
      TRequired,
      TImmutable,
      TAutoGenerated,
      TConditionalLogic,
      GenericDatabase
    >
  } {
    return null as any
  },

  /**
   * Represents the type structure for this field's configuration options.
   *
   * Note: This is a TypeScript type assertion and does not involve any runtime logic or data.
   */
  TOptions: undefined as unknown as Omit<
    CombinedFieldOptions<
      FieldModel<TextFieldModelOptions<string, string>, 'text', string, string, string, undefined, undefined>,
      TextFieldModelOptions<string, string> &
        CustomOptions<(SelectChoice | SelectChoiceGroup)[]> &
        ResolveFieldUIOptions<{ placeholder: true }>,
      false,
      boolean,
      boolean,
      boolean,
      ConditionalLogic | undefined,
      GenericDatabase
    >,
    'allowEmptyString' | 'maxLength' | 'minLength' | 'trim'
  >,
}
