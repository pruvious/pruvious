import {
  type CombinedFieldOptions,
  defineField,
  type GenericDatabase,
  type ResolveFieldUIOptions,
  type TranslatableStringCallback,
} from '#pruvious/server'
import {
  arrayFieldModel,
  type ArrayFieldModelOptions,
  type ConditionalLogic,
  type Field,
  type FieldModel,
} from '@pruvious/orm'
import type { PropType } from 'vue'

export interface ChipsChoice {
  /**
   * An optional label to display in the UI for this choice.
   * If not provided, the `value` will be displayed instead.
   *
   * You can provide either a string or a callback function that returns a string.
   *
   * @example
   * ```ts
   * // Using a string
   * label: 'Blue'
   *
   * // Using a callback
   * label: ({ __ }) => __('pruvious-api', 'Blue')
   * ```
   */
  label?: string | TranslatableStringCallback

  /**
   * Unique string identifier for this choice.
   * This value is stored in the database and returned when the field is selected.
   */
  value: string
}

interface CustomOptions<TChoices extends ChipsChoice[] | false> {
  /**
   * The choices available for this field.
   * When provided, the chips input will behave like a select dropdown and only allow selection from the given choices.
   *
   * Each choice must have a unique `value`.
   *
   * By default, any text can be entered into the chips input.
   *
   * @default false
   *
   * @example
   * ```ts
   * choices: [
   *   { label: 'Red', value: 'red' },
   *   { label: 'Green', value: 'green' },
   *   { label: 'Blue', value: 'blue' },
   * ]
   * ```
   */
  choices?: TChoices

  /**
   * Determines if whitespace should be trimmed from array items before database storage.
   *
   * @default true
   */
  trim?: boolean

  ui?: {
    /**
     * Defines the visual style variant of the component.
     *
     * @default 'accent'
     */
    variant?: 'primary' | 'secondary' | 'accent'
  }
}

type ExtractValues<T> = [T] extends [any[]] ? (T extends Array<{ value: infer V }> ? V[] : string[]) : string[]

const customOptions: CustomOptions<ChipsChoice[] | false> = {
  choices: false,
  trim: true,
  ui: {
    variant: 'accent',
  },
}

export default {
  /**
   * Creates a new `Field` instance.
   *
   * This function is intended for server-side use in collection definitions.
   * For client-side usage, import the equivalent function from `#pruvious/client`.
   */
  serverFn: function <
    const TRequired extends boolean | undefined,
    const TImmutable extends boolean | undefined,
    const TAutoGenerated extends boolean | undefined,
    TConditionalLogic extends ConditionalLogic | undefined,
    const TChoices extends ChipsChoice[] | false,
    const TValues extends ExtractValues<TChoices> = ExtractValues<TChoices>,
  >(
    options: Omit<
      CombinedFieldOptions<
        FieldModel<
          ArrayFieldModelOptions<TValues, TValues>,
          'text',
          NoInfer<TValues>,
          TValues,
          TValues,
          undefined,
          undefined
        >,
        ArrayFieldModelOptions<TValues, TValues> &
          CustomOptions<TChoices> &
          ResolveFieldUIOptions<{ placeholder: true }>,
        false,
        TRequired,
        TImmutable,
        TAutoGenerated,
        TConditionalLogic,
        GenericDatabase
      >,
      'allowValues' | 'denyValues'
    >,
  ): Field<
    FieldModel<ArrayFieldModelOptions<TValues, TValues>, 'text', TValues, TValues, TValues, undefined, undefined>,
    ArrayFieldModelOptions<TValues, TValues> & CustomOptions<TChoices> & ResolveFieldUIOptions<{ placeholder: true }>,
    false,
    TRequired,
    TImmutable,
    TAutoGenerated,
    TConditionalLogic,
    GenericDatabase
  > {
    const bound = defineField({
      model: arrayFieldModel(),
      customOptions: {
        ...customOptions,
        allowValues: options.choices ? options.choices.map(({ value }) => value) : undefined, // @todo test if this works
      },
      omitOptions: ['allowValues', 'denyValues'],
      castedTypeFn: ({ field }) =>
        field.options.choices
          ? `(${field.options.choices.map(({ value }) => `'${value.replaceAll("'", "\\'")}'`).join(' | ')})[]`
          : 'string[]',
      populatedTypeFn: ({ field }) =>
        field.options.choices
          ? `(${field.options.choices.map(({ value }) => `'${value.replaceAll("'", "\\'")}'`).join(' | ')})[]`
          : 'string[]',
      inputTypeFn: ({ field }) =>
        field.options.choices
          ? `(${field.options.choices.map(({ value }) => `'${value.replaceAll("'", "\\'")}'`).join(' | ')})[]`
          : 'string[]',
    }).serverFn.bind(this)
    return bound(options as any) as any
  },

  /**
   * Creates a new `Field` instance.
   *
   * This function is intended for client-side use in Vue components.
   * For server-side usage, import the equivalent function from `#pruvious/server`.
   */
  clientFn: function <
    const TRequired extends boolean | undefined,
    const TImmutable extends boolean | undefined,
    const TAutoGenerated extends boolean | undefined,
    TConditionalLogic extends ConditionalLogic | undefined,
    const TChoices extends ChipsChoice[] | false,
    const TValues extends ExtractValues<TChoices> = ExtractValues<TChoices>,
  >(
    options: Omit<
      CombinedFieldOptions<
        FieldModel<
          ArrayFieldModelOptions<TValues, TValues>,
          'text',
          NoInfer<TValues>,
          TValues,
          TValues,
          undefined,
          undefined
        >,
        ArrayFieldModelOptions<TValues, TValues> &
          CustomOptions<TChoices> &
          ResolveFieldUIOptions<{ placeholder: true }>,
        false,
        TRequired,
        TImmutable,
        TAutoGenerated,
        TConditionalLogic,
        GenericDatabase
      >,
      'allowValues' | 'denyValues'
    >,
  ): { type: PropType<TValues>; required: true } & {
    field: Field<
      FieldModel<ArrayFieldModelOptions<TValues, TValues>, 'text', TValues, TValues, TValues, undefined, undefined>,
      ArrayFieldModelOptions<TValues, TValues> & CustomOptions<TChoices> & ResolveFieldUIOptions<{ placeholder: true }>,
      false,
      TRequired,
      TImmutable,
      TAutoGenerated,
      TConditionalLogic,
      GenericDatabase
    >
  } {
    return null as any
  },

  /**
   * Represents the type structure for this field's configuration options.
   *
   * Note: This is a TypeScript type assertion and does not involve any runtime logic or data.
   */
  TOptions: undefined as unknown as Omit<
    CombinedFieldOptions<
      FieldModel<ArrayFieldModelOptions<string, string>, 'text', string, string, string, undefined, undefined>,
      ArrayFieldModelOptions<string, string> &
        CustomOptions<ChipsChoice[] | false> &
        ResolveFieldUIOptions<{ placeholder: true }>,
      false,
      boolean,
      boolean,
      boolean,
      ConditionalLogic | undefined,
      GenericDatabase
    >,
    'allowValues' | 'denyValues'
  >,
}
