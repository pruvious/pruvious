import {
  type CombinedFieldOptions,
  defineField,
  type GenericDatabase,
  type ResolveFieldUIOptions,
} from '#pruvious/server'
import {
  arrayFieldModel,
  type ArrayFieldModelOptions,
  type ConditionalLogic,
  type Field,
  type FieldModel,
} from '@pruvious/orm'
import type { PropType } from 'vue'

interface CustomOptions {}

type ExtractAllowedValues<T extends string[] | undefined> = [T] extends [undefined]
  ? string[]
  : (T & string[])[number][]

const customOptions: CustomOptions = {}

export default {
  /**
   * Creates a new `Field` instance.
   *
   * This function is intended for server-side use in collection definitions.
   * For client-side usage, import the equivalent function from `#pruvious/client`.
   */
  serverFn: function <
    const TRequired extends boolean | undefined,
    const TImmutable extends boolean | undefined,
    const TAutoGenerated extends boolean | undefined,
    TConditionalLogic extends ConditionalLogic | undefined,
    const TAllowedValues extends string[] | undefined,
    TAllowedType extends ExtractAllowedValues<TAllowedValues> = ExtractAllowedValues<TAllowedValues>,
    TCastedType extends TAllowedType = TAllowedType,
  >(
    options: CombinedFieldOptions<
      FieldModel<
        ArrayFieldModelOptions<TAllowedType, TAllowedType>,
        'text',
        TCastedType,
        TCastedType,
        TCastedType,
        undefined
      >,
      ArrayFieldModelOptions<TAllowedType, TAllowedType> & CustomOptions & ResolveFieldUIOptions<undefined>,
      false,
      TRequired,
      TImmutable,
      TAutoGenerated,
      TConditionalLogic,
      GenericDatabase
    >,
  ): Field<
    FieldModel<
      ArrayFieldModelOptions<TAllowedType, TAllowedType>,
      'text',
      TCastedType,
      TCastedType,
      TCastedType,
      undefined
    >,
    ArrayFieldModelOptions<TAllowedType, TAllowedType> & CustomOptions & ResolveFieldUIOptions<undefined>,
    false,
    TRequired,
    TImmutable,
    TAutoGenerated,
    TConditionalLogic,
    GenericDatabase
  > {
    const bound = defineField({
      model: arrayFieldModel(),
      customOptions,
      castedTypeFn: ({ options }) =>
        options.allowValues
          ? `(${options.allowValues.map((value) => `'${value.replaceAll("'", "\\'")}'`).join(' | ')})[]`
          : 'string[]',
      populatedTypeFn: ({ options }) =>
        options.allowValues
          ? `(${options.allowValues.map((value) => `'${value.replaceAll("'", "\\'")}'`).join(' | ')})[]`
          : 'string[]',
    }).serverFn.bind(this)
    return bound(options as any) as any
  },

  /**
   * Creates a new `Field` instance.
   *
   * This function is intended for client-side use in Vue components.
   * For server-side usage, import the equivalent function from `#pruvious/server`.
   */
  clientFn: function <
    const TRequired extends boolean | undefined,
    const TImmutable extends boolean | undefined,
    const TAutoGenerated extends boolean | undefined,
    TConditionalLogic extends ConditionalLogic | undefined,
    const TAllowedValues extends string[] | undefined,
    TAllowedType extends ExtractAllowedValues<TAllowedValues> = ExtractAllowedValues<TAllowedValues>,
    TCastedType extends TAllowedType = TAllowedType,
  >(
    options: CombinedFieldOptions<
      FieldModel<
        ArrayFieldModelOptions<TAllowedType, TAllowedType>,
        'text',
        TCastedType,
        TCastedType,
        TCastedType,
        undefined
      >,
      ArrayFieldModelOptions<TAllowedType, TAllowedType> & CustomOptions & ResolveFieldUIOptions<undefined>,
      false,
      TRequired,
      TImmutable,
      TAutoGenerated,
      TConditionalLogic,
      GenericDatabase
    >,
  ): { type: PropType<TAllowedType>; required: true } & {
    field: Field<
      FieldModel<
        ArrayFieldModelOptions<TAllowedType, TAllowedType>,
        'text',
        TCastedType,
        TCastedType,
        TCastedType,
        undefined
      >,
      ArrayFieldModelOptions<TAllowedType, TAllowedType> & CustomOptions & ResolveFieldUIOptions<undefined>,
      false,
      TRequired,
      TImmutable,
      TAutoGenerated,
      TConditionalLogic,
      GenericDatabase
    >
  } {
    return null as any
  },

  /**
   * Represents the type structure for this field's configuration options.
   *
   * Note: This is a TypeScript type assertion and does not involve any runtime logic or data.
   */
  TOptions: undefined as unknown as CombinedFieldOptions<
    FieldModel<ArrayFieldModelOptions<string, string>, 'text', string, string, string, undefined>,
    ArrayFieldModelOptions<string, string> & CustomOptions & ResolveFieldUIOptions<undefined>,
    false,
    boolean,
    boolean,
    boolean,
    ConditionalLogic | undefined,
    GenericDatabase
  >,
}
