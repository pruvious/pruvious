import { dirname, resolve } from 'pathe'

export interface ResolveCustomComponentPathOptions {
  /**
   * The component path to resolve.
   */
  component: string

  /**
   * The absolute file path where the component is being referenced.
   */
  file: string

  /**
   * The source directory of the Nuxt layer where the function is called.
   */
  srcDir: string
}

/**
 * Resolves a custom Vue component by its `path` for use in a Pruvious field, collection, or singleton option.
 * This function should only be used in the server-side context within the following directories:
 *
 * - `<srcDir>/<pruvious.dir.blocks>`
 * - `<serverDir>/<pruvious.dir.collections>`
 * - `<serverDir>/<pruvious.dir.singletons>`
 * - `<sharedDir>`
 *
 * Using this function outside of these directories will not resolve the component.
 *
 * The following rules apply:
 *
 * - The function name `resolvePruviousComponent` must remain unchanged and not be aliased.
 * - The import `path` must be a literal string, not a variable.
 * - The import `path` can be:
 *   - A path starting with the alias `>/`.
 *     - This path is resolved relative to the `<srcDir>` directory of the Nuxt layer where the function is called.
 *   - A path starting with the Nuxt alias `@/` or `~/`.
 *     - This path is resolved relative to the first matching `<srcDir>` directory in the Nuxt layer hierarchy.
 *   - An absolute path to a `.vue` component.
 *   - A path for an npm module.
 * - When working within the `<sharedDir>` directory, always use `resolveNamedPruviousComponent()` instead of `resolvePruviousComponent()`.
 *
 * The function itself does nothing and simply returns the `path` as is.
 * It is used by the Pruvious build process to resolve custom components and generate the `customComponents` object.
 * This object can be imported from `#pruvious/client` and is used on the client-side to dynamically import custom components.
 * In contrast to `resolveNamedPruviousComponent()`, the component name is automatically generated by hashing the resolved component `path`.
 *
 * @example
 * ```ts
 * import { resolvePruviousComponent } from '#pruvious/server'
 *
 * // Correct
 * resolvePruviousComponent('>/components/MyComponent.vue')
 * resolvePruviousComponent('/Project/app/components/MyComponent.vue')
 *
 * // Incorrect
 * resolvePruviousComponent(`>/components/${name}.vue`)
 * resolvePruviousComponent('MyComponent')
 * ```
 */
export function resolvePruviousComponent(path: string) {
  return path
}

/**
 * Resolves a custom Vue component by its `path` for use in a Pruvious field, collection, or singleton option.
 * The resolved component is accessible in the client-side context through `#pruvious/client` and can be referenced as `customComponents[name]`.
 * This function should only be used in the server-side context within the following directories:
 *
 * - `<srcDir>/<pruvious.dir.blocks>`
 * - `<serverDir>/<pruvious.dir.collections>`
 * - `<serverDir>/<pruvious.dir.singletons>`
 * - `<sharedDir>`
 *
 * Using this function outside of these directories will not resolve the component.
 *
 * The following rules apply:
 *
 * - The function name `resolvePruviousComponent` must remain unchanged and not be aliased.
 * - The component `name` must be a unique literal string, not a variable.
 *   - It cannot include forward slashes (`/`) or periods (`.`)
 * - The import `path` can be:
 *   - A path starting with the alias `>/`.
 *     - This path is resolved relative to the `<srcDir>` directory of the Nuxt layer where the function is called.
 *   - A path starting with the Nuxt alias `@/` or `~/`.
 *     - This path is resolved relative to the first matching `<srcDir>` directory in the Nuxt layer hierarchy.
 *   - An absolute path to a `.vue` component.
 *   - A path for an npm module.
 * - When working within the `<sharedDir>` directory, always use `resolveNamedPruviousComponent()` instead of `resolvePruviousComponent()`.
 *
 * The function itself does nothing and simply returns `name` as is.
 * It is used by the Pruvious build process to resolve custom components and generate the `customComponents` object.
 * This object can be imported from `#pruvious/client` and is used on the client-side to dynamically import custom components.
 *
 * @example
 * ```ts
 * import { resolveNamedPruviousComponent } from '#pruvious/server'
 *
 * // Correct
 * resolveNamedPruviousComponent('MyComponent', '>/components/MyComponent.vue')
 * resolveNamedPruviousComponent('MyComponent', '/Project/app/components/MyComponent.vue')
 *
 * // Incorrect
 * resolveNamedPruviousComponent('MyComponent', `>/components/${name}.vue`)
 * resolveNamedPruviousComponent('MyComponent', 'MyComponent')
 * ```
 */
export function resolveNamedPruviousComponent(name: string, path: string) {
  return name
}

/**
 * Resolves the absolute file path for a custom component based on different path formats.
 *
 * Handles three types of `component` path formats:
 *
 * - Alias paths starting with `>/` - resolved relative to `srcDir` of the Nuxt layer where the function is called.
 * - Alias paths starting with `@/` or `~/` - returned as-is.
 * - Relative paths starting with `.` - resolved relative to current `file`.
 * - Absolute/module paths - returned as-is.
 */
export function resolveCustomComponentPath(options: ResolveCustomComponentPathOptions) {
  const { component, file, srcDir } = options
  return component.startsWith('>/')
    ? resolve(srcDir, component.slice(2))
    : component.startsWith('.')
      ? resolve(dirname(file), component)
      : component
}
