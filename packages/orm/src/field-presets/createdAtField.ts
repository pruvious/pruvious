import { isInteger, isObject } from '@pruvious/utils'
import { Field, FieldModel, type GenericDatabase, type GenericSanitizedInputFilter } from '../core'
import { numberFieldModel, type NumberFieldModelOptions } from '../field-models'

/**
 * Generates a `createdAt` field that stores the timestamp of when a record was created.
 */
export function createdAtField(): Field<
  FieldModel<NumberFieldModelOptions<number, number>, 'numeric', number, number, string | number, undefined>,
  {},
  false,
  false,
  true,
  true,
  undefined,
  GenericDatabase
> {
  return new Field({
    model: numberFieldModel(),
    nullable: false,
    immutable: true,
    autoGenerated: true,
    options: {},
    inputFilters: {
      beforeQueryExecution: createdAtFieldBeforeQueryExecution,
    },
  }) as any
}

/**
 * Sets the `createdAt` field to the current timestamp before query execution.
 */
export const createdAtFieldBeforeQueryExecution: GenericSanitizedInputFilter = (_, { context }) => {
  if (context.operation === 'insert') {
    if (!isObject(context.cache['_tmp'])) {
      context.cache['_tmp'] = {}
    }

    if (
      !isInteger(context.cache['_tmp']['_timestamp']) ||
      context.cache['_tmp']['_timestamp'] < -8640000000000000 ||
      context.cache['_tmp']['_timestamp'] > 8640000000000000
    ) {
      context.cache['_tmp']['_timestamp'] = Date.now()
    }

    return context.cache['_tmp']['_timestamp']
  }
}
