import { isInteger, isObject } from '@pruvious/utils'
import { Field, FieldModel, type GenericDatabase, type GenericSanitizedInputFilter } from '../core'
import { numberFieldModel, type NumberFieldModelOptions } from '../field-models'

/**
 * Generates a `updatedAt` field that stores the timestamp of when a record was last updated.
 */
export function updatedAtField(): Field<
  FieldModel<NumberFieldModelOptions<number, number>, 'numeric', number, number, string | number, undefined>,
  {},
  false,
  false,
  false,
  true,
  undefined,
  GenericDatabase
> {
  return new Field({
    model: numberFieldModel(),
    nullable: false,
    autoGenerated: true,
    options: {},
    inputFilters: {
      beforeQueryExecution: updatedAtFieldBeforeQueryExecution,
    },
  }) as any
}

/**
 * Sets the `updatedAt` field to the current timestamp before query execution.
 */
export const updatedAtFieldBeforeQueryExecution: GenericSanitizedInputFilter = (_, { context }) => {
  if (!isObject(context.cache['__tmp'])) {
    context.cache['__tmp'] = {}
  }

  if (
    !isInteger(context.cache['__tmp']['__timestamp']) ||
    context.cache['__tmp']['__timestamp'] < -8640000000000000 ||
    context.cache['__tmp']['__timestamp'] > 8640000000000000
  ) {
    context.cache['__tmp']['__timestamp'] = Date.now()
  }

  return context.cache['__tmp']['__timestamp']
}
