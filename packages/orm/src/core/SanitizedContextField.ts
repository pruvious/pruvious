import type { ConditionalLogicResolver } from './ConditionalLogicResolver'
import type { Context } from './Context'
import { ContextField, type ContextFieldData } from './ContextField'
import type { GenericDatabase } from './Database'
import type { Field } from './Field'
import type { GenericFieldModel } from './FieldModel'
import type { ConditionalLogic } from './types'

export interface SanitizedContextFieldData extends ContextFieldData {
  /**
   * Instance of the `ConditionalLogicResolver` class for evaluating conditional logic.
   * This resolver already contains the current record's input data.
   */
  conditionalLogicResolver: ConditionalLogicResolver
}

/**
 * A sanitized field with `context` available during query builder operations (INSERT, SELECT, UPDATE, DELETE).
 * The `context` contains details about the collection, field, and operation-specific information.
 *
 * In addition to the `ContextField`, this class provides:
 *
 * - A `ConditionalLogicResolver` instance.
 */
export class SanitizedContextField<
  TModel extends GenericFieldModel,
  const TOptions extends TModel['TOptions'],
  const TNullable extends boolean | undefined,
  const TRequired extends boolean | undefined,
  const TImmutable extends boolean | undefined,
  const TAutoGenerated extends boolean | undefined,
  TConditionalLogic extends ConditionalLogic | undefined,
  TDatabase extends GenericDatabase,
  TContext extends Context<TDatabase>,
> extends ContextField<
  TModel,
  TOptions,
  TNullable,
  TRequired,
  TImmutable,
  TAutoGenerated,
  TConditionalLogic,
  TDatabase,
  TContext
> {
  /**
   * Instance of the `ConditionalLogicResolver` class for evaluating conditional logic expressions.
   * This resolver is pre-initialized with the current record's input data and resolved `results`.
   */
  readonly conditionalLogicResolver: ConditionalLogicResolver

  constructor(
    definition: Field<TModel, TOptions, TNullable, TRequired, TImmutable, TAutoGenerated, TConditionalLogic, TDatabase>,
    context: TContext,
    data: SanitizedContextFieldData,
  ) {
    super(definition, context, data)
    this.conditionalLogicResolver = data.conditionalLogicResolver
  }
}
