import type { Context } from './Context'
import type { GenericDatabase } from './Database'
import type { Field } from './Field'
import type { GenericFieldModel } from './FieldModel'
import type { ConditionalLogic } from './types'

export interface ContextFieldData {
  /**
   * The field path, expressed in dot notation, represents the exact location of the field within the current input data structure.
   */
  path: string
}

/**
 * A field with additional `context` accessible only during query builder operations (INSERT, SELECT, UPDATE, DELETE).
 * The `context` contains details about the collection, field, and operation-specific information.
 */
export class ContextField<
  TModel extends GenericFieldModel,
  const TOptions extends TModel['TOptions'],
  const TNullable extends boolean | undefined,
  const TRequired extends boolean | undefined,
  const TImmutable extends boolean | undefined,
  const TAutoGenerated extends boolean | undefined,
  TConditionalLogic extends ConditionalLogic | undefined,
  TDatabase extends GenericDatabase,
  TContext extends Context<TDatabase>,
> {
  /**
   * The field definition.
   */
  readonly definition: Field<
    TModel,
    TOptions,
    TNullable,
    TRequired,
    TImmutable,
    TAutoGenerated,
    TConditionalLogic,
    TDatabase
  >

  /**
   * The current context.
   */
  readonly context: TContext

  /**
   * The field path, expressed in dot notation, represents the exact location of the field within the current input data structure.
   */
  readonly path: string

  /**
   * Indicates if this field is nested within another field.
   * This is automatically resolved based on the field's `path`.
   * A field is considered a subfield if its `path` contains a dot (`.`).
   */
  readonly isSubfield: boolean

  constructor(
    definition: Field<TModel, TOptions, TNullable, TRequired, TImmutable, TAutoGenerated, TConditionalLogic, TDatabase>,
    context: TContext,
    data: ContextFieldData,
  ) {
    this.definition = definition
    this.context = context
    this.path = data.path
    this.isSubfield = data.path.includes('.')
  }
}
