export const validatorsMeta = [
  {
    name: 'email',
    comment: [
      'Creates a validator to ensure that the field value is a valid email address.',
      '',
      '- Validates against [standard email regex pattern](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/email#basic_validation) used by browsers.',
      '- Skips validation when value is `null`.',
      '- Throws an error if the validation fails.',
      "- The default error message is: 'Invalid email address'.",
      '- A custom `errorMessage` can be provided as a parameter.',
      '  - The `errorMessage` can be a string or a function that returns a string.',
      '  - The function receives an object with `_` and `__` properties to access the translation functions.',
    ],
  },
  {
    name: 'timestamp',
    comment: [
      'Creates a validator to ensure that the field value is a valid JavaScript timestamp.',
      '',
      '- Skips validation when value is `null`.',
      '- Throws an error if the validation fails.',
      "- The default error message is: 'Invalid timestamp'.",
      '- A custom `errorMessage` can be provided as a parameter.',
      '  - The `errorMessage` can be a string or a function that returns a string.',
      '  - The function receives an object with `_` and `__` properties to access the translation functions.',
    ],
  },
  {
    name: 'unique',
    comment: [
      'Creates a validator to ensure that the field (or subfield) value is unique within a collection (or subfields array).',
      '',
      '- Works with a single (sub)field, where this validator is applied, or multiple `fields`, which are passed as an array of (sub)field names.',
      '- Throws an error if the validation fails.',
      "- The default error message is: 'The value must be unique'.",
      '- A custom `errorMessage` can be provided as a parameter.',
      '  - The `errorMessage` can be a string or a function that returns a string.',
      '  - The function receives an object with `_` and `__` properties to access the translation functions.',
    ],
  },
  {
    name: 'uploadPath',
    comment: [
      'Creates a validator to ensure that the field value is a valid upload path.',
      'The path must be an absolute path starting with a `/`.',
      'The directory names can only contain lowercase letters, numbers, and hyphens.',
      'The file name can contain lowercase letters, numbers, hyphens, and periods.',
      '',
      '- Skips validation when value is `null`.',
      '- Throws an error if the validation fails.',
      "- The default error message is: 'Invalid path'.",
      '- A custom `errorMessage` can be provided as a parameter.',
      '  - The `errorMessage` can be a string or a function that returns a string.',
      '  - The function receives an object with `_` and `__` properties to access the translation functions.',
      '',
      'Examples of valid upload paths:',
      '',
      '- `/image.webp`',
      '- `/my-dir/my-image.webp`',
      '- `/dir`',
      '',
      'Examples of invalid upload paths:',
      '',
      '- `image.webp`',
      '- `/My-Image.webp`',
      '- `/my.dir/image.webp`',
      '- `/dir/`',
      '- `/`',
    ],
  },
  {
    name: 'url',
    comment: [
      'Creates a validator to ensure that the field value is a valid URL.',
      '',
      '- Uses the native `URL` constructor for validation.',
      '- Skips validation when value is `null`.',
      '- Throws an error if the validation fails.',
      "- The default error message is: 'Invalid URL'.",
      '- A custom `errorMessage` can be provided as a parameter.',
      '  - The `errorMessage` can be a string or a function that returns a string.',
      '  - The function receives an object with `_` and `__` properties to access the translation functions.',
    ],
  },
]
