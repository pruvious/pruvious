import { expect, test } from 'vitest'
import { isAlphanumeric, isIdentifier, isNumericString, isSlug, isStringInteger } from '../../src'

test('is alphanumeric', () => {
  expect(isAlphanumeric('A')).toBe(true)
  expect(isAlphanumeric('a')).toBe(true)
  expect(isAlphanumeric('Z')).toBe(true)
  expect(isAlphanumeric('z')).toBe(true)
  expect(isAlphanumeric('0')).toBe(true)
  expect(isAlphanumeric('1')).toBe(true)
  expect(isAlphanumeric('9')).toBe(true)
  expect(isAlphanumeric('11')).toBe(true)
  expect(isAlphanumeric('1?')).toBe(true)
  expect(isAlphanumeric('?1')).toBe(false)
  expect(isAlphanumeric('')).toBe(false)
  expect(isAlphanumeric('-1')).toBe(false)
  expect(isAlphanumeric('?')).toBe(false)
  expect(isAlphanumeric(' ')).toBe(false)
  expect(isAlphanumeric('ö')).toBe(false)
  expect(isAlphanumeric('-')).toBe(false)
  expect(() => isAlphanumeric(null as any)).toThrow()
})

test('is identifier', () => {
  expect(isIdentifier('foo')).toBe(true)
  expect(isIdentifier('fooBar')).toBe(true)
  expect(isIdentifier('FooBar')).toBe(true)
  expect(isIdentifier('foo_bar')).toBe(true)
  expect(isIdentifier('foo__bar')).toBe(true)
  expect(isIdentifier('_')).toBe(true)
  expect(isIdentifier('__')).toBe(true)
  expect(isIdentifier('a'.repeat(64))).toBe(true)
  expect(isIdentifier('0foo')).toBe(false)
  expect(isIdentifier('$foo')).toBe(false)
  expect(isIdentifier('foo bar')).toBe(false)
  expect(isIdentifier(' foo')).toBe(false)
  expect(isIdentifier('foo ')).toBe(false)
})

test('is numeric string', () => {
  expect(isNumericString('1')).toBe(true)
  expect(isNumericString('-1')).toBe(true)
  expect(isNumericString('1.5')).toBe(true)
  expect(isNumericString('-1.5')).toBe(true)
  expect(isNumericString('0.5')).toBe(true)
  expect(isNumericString('-0.5')).toBe(true)
  expect(isNumericString('10')).toBe(true)
  expect(isNumericString('90071992547409910')).toBe(true)
  expect(isNumericString('-90071992547409910')).toBe(true)
  expect(isNumericString('0')).toBe(true)
  expect(isNumericString('0.1')).toBe(true)
  expect(isNumericString('0.0')).toBe(false)
  expect(isNumericString('1.0')).toBe(false)
  expect(isNumericString('01')).toBe(false)
  expect(isNumericString('1.')).toBe(false)
  expect(isNumericString('1.50')).toBe(false)
  expect(isNumericString('foo')).toBe(false)
  expect(isNumericString(1)).toBe(false)
  expect(isNumericString(1n)).toBe(false)
  expect(isNumericString(NaN)).toBe(false)
  expect(isNumericString(Infinity)).toBe(false)
  expect(isNumericString(null)).toBe(false)
  expect(isNumericString('')).toBe(false)
  expect(isNumericString(' ')).toBe(false)
  expect(isNumericString(undefined)).toBe(false)
})

test('is slug', () => {
  expect(isSlug('foo')).toBe(true)
  expect(isSlug('foo-bar')).toBe(true)
  expect(isSlug('0foo')).toBe(true)
  expect(isSlug('0-foo')).toBe(true)
  expect(isSlug('Foo')).toBe(false)
  expect(isSlug('fooBar')).toBe(false)
  expect(isSlug('foo_bar')).toBe(false)
  expect(isSlug('fö-bär')).toBe(false)
  expect(isSlug('niđe')).toBe(false)
  expect(isSlug('čekić')).toBe(false)
  expect(isSlug(' foo')).toBe(false)
  expect(isSlug('foo ')).toBe(false)
  expect(isSlug('foo--bar')).toBe(false)
  expect(isSlug('foo-')).toBe(false)
  expect(isSlug('-foo')).toBe(false)
  expect(isSlug('-')).toBe(false)
  expect(isSlug('')).toBe(false)
})

test('is string integer', () => {
  expect(isStringInteger('1')).toBe(true)
  expect(isStringInteger('-1')).toBe(true)
  expect(isStringInteger('0')).toBe(true)
  expect(isStringInteger('01')).toBe(false)
  expect(isStringInteger('1.5')).toBe(false)
  expect(isStringInteger('foo')).toBe(false)
  expect(isStringInteger(1)).toBe(false)
  expect(isStringInteger(1n)).toBe(false)
  expect(isStringInteger(NaN)).toBe(false)
  expect(isStringInteger(Infinity)).toBe(false)
  expect(isStringInteger(null)).toBe(false)
  expect(isStringInteger('')).toBe(false)
  expect(isStringInteger(' ')).toBe(false)
  expect(isStringInteger(undefined)).toBe(false)
})
