import { expect, test } from 'vitest'
import { camelCase, capitalize, kebabCase, pascalCase, snakeCase, titleCase } from '../../src'

test('camel case', () => {
  expect(camelCase('foo-bar')).toBe('fooBar')
  expect(camelCase('fooBar')).toBe('fooBar')
  expect(camelCase('FooBar')).toBe('fooBar')
  expect(camelCase('foo_bar')).toBe('fooBar')
  expect(camelCase('foo bar')).toBe('fooBar')
  expect(camelCase(' foo bar ')).toBe('fooBar')
  expect(camelCase('foo--bar')).toBe('fooBar')
  expect(camelCase('foo-bar-baz')).toBe('fooBarBaz')
  expect(camelCase('FOO')).toBe('foo')
  expect(camelCase('fooBAR')).toBe('fooBAR')
  expect(camelCase('FooBAR')).toBe('fooBAR')
  expect(camelCase('foo123')).toBe('foo123')
  expect(camelCase('123Bar')).toBe('123Bar')
  expect(camelCase('Foo Bar')).toBe('fooBar')
  expect(camelCase('Foo BAR')).toBe('fooBAR')
  expect(camelCase('FOO bar')).toBe('fooBar')
  expect(camelCase('')).toBe('')
  expect(camelCase('-')).toBe('')
  expect(camelCase('a-')).toBe('a')
  expect(camelCase('-a')).toBe('a')
  expect(camelCase('A-')).toBe('a')
  expect(camelCase('-A')).toBe('a')
  expect(camelCase('Ä')).toBe('')
})

test('kebab case', () => {
  expect(kebabCase('foo-bar')).toBe('foo-bar')
  expect(kebabCase('fooBar')).toBe('foo-bar')
  expect(kebabCase('FooBar')).toBe('foo-bar')
  expect(kebabCase('foo_bar')).toBe('foo-bar')
  expect(kebabCase('foo bar')).toBe('foo-bar')
  expect(kebabCase(' foo bar ')).toBe('foo-bar')
  expect(kebabCase('foo--bar')).toBe('foo-bar')
  expect(kebabCase('foo-bar-baz')).toBe('foo-bar-baz')
  expect(kebabCase('FOO')).toBe('foo')
  expect(kebabCase('fooBAR')).toBe('foo-bar')
  expect(kebabCase('FooBAR')).toBe('foo-bar')
  expect(kebabCase('foo123')).toBe('foo123')
  expect(kebabCase('123Bar')).toBe('123-bar')
  expect(kebabCase('Foo Bar')).toBe('foo-bar')
  expect(kebabCase('Foo BAR')).toBe('foo-bar')
  expect(kebabCase('FOO bar')).toBe('foo-bar')
  expect(kebabCase('')).toBe('')
  expect(kebabCase('-')).toBe('')
  expect(kebabCase('a-')).toBe('a')
  expect(kebabCase('-a')).toBe('a')
  expect(kebabCase('A-')).toBe('a')
  expect(kebabCase('-A')).toBe('a')
  expect(kebabCase('Ä')).toBe('')
})

test('pascal case', () => {
  expect(pascalCase('foo-bar')).toBe('FooBar')
  expect(pascalCase('fooBar')).toBe('FooBar')
  expect(pascalCase('FooBar')).toBe('FooBar')
  expect(pascalCase('foo_bar')).toBe('FooBar')
  expect(pascalCase('foo bar')).toBe('FooBar')
  expect(pascalCase(' foo bar ')).toBe('FooBar')
  expect(pascalCase('foo--bar')).toBe('FooBar')
  expect(pascalCase('foo-bar-baz')).toBe('FooBarBaz')
  expect(pascalCase('FOO')).toBe('FOO')
  expect(pascalCase('fooBAR')).toBe('FooBAR')
  expect(pascalCase('FooBAR')).toBe('FooBAR')
  expect(pascalCase('foo123')).toBe('Foo123')
  expect(pascalCase('123Bar')).toBe('123Bar')
  expect(pascalCase('Foo Bar')).toBe('FooBar')
  expect(pascalCase('Foo BAR')).toBe('FooBAR')
  expect(pascalCase('FOO bar')).toBe('FOOBar')
  expect(pascalCase('')).toBe('')
  expect(pascalCase('-')).toBe('')
  expect(pascalCase('a-')).toBe('A')
  expect(pascalCase('-a')).toBe('A')
  expect(pascalCase('A-')).toBe('A')
  expect(pascalCase('-A')).toBe('A')
  expect(pascalCase('Ä')).toBe('')
})

test('snake case', () => {
  expect(snakeCase('foo-bar')).toBe('foo_bar')
  expect(snakeCase('fooBar')).toBe('foo_bar')
  expect(snakeCase('FooBar')).toBe('foo_bar')
  expect(snakeCase('foo_bar')).toBe('foo_bar')
  expect(snakeCase('foo bar')).toBe('foo_bar')
  expect(snakeCase(' foo bar ')).toBe('foo_bar')
  expect(snakeCase('foo--bar')).toBe('foo_bar')
  expect(snakeCase('foo-bar-baz')).toBe('foo_bar_baz')
  expect(snakeCase('FOO')).toBe('foo')
  expect(snakeCase('fooBAR')).toBe('foo_bar')
  expect(snakeCase('FooBAR')).toBe('foo_bar')
  expect(snakeCase('foo123')).toBe('foo123')
  expect(snakeCase('123Bar')).toBe('123_bar')
  expect(snakeCase('Foo Bar')).toBe('foo_bar')
  expect(snakeCase('Foo BAR')).toBe('foo_bar')
  expect(snakeCase('FOO bar')).toBe('foo_bar')
  expect(snakeCase('')).toBe('')
  expect(snakeCase('-')).toBe('')
  expect(snakeCase('a-')).toBe('a')
  expect(snakeCase('-a')).toBe('a')
  expect(snakeCase('A-')).toBe('a')
  expect(snakeCase('-A')).toBe('a')
  expect(snakeCase('Ä')).toBe('')
})

test('title case', () => {
  expect(titleCase('foo')).toBe('Foo')
  expect(titleCase('foo-bar')).toBe('Foo Bar')
  expect(titleCase('foo-bar', false)).toBe('Foo bar')
  expect(titleCase('fooBarBaz')).toBe('Foo Bar Baz')
  expect(titleCase('fooBarBaz', false)).toBe('Foo bar baz')
  expect(titleCase('FooBar')).toBe('Foo Bar')
  expect(titleCase('FooBAR')).toBe('Foo Bar')
  expect(titleCase('Foo BAR')).toBe('Foo Bar')
  expect(titleCase('FOO bar')).toBe('Foo Bar')
  expect(titleCase('foo_bar')).toBe('Foo Bar')
  expect(titleCase('')).toBe('')
  expect(titleCase(' ')).toBe('')
  expect(titleCase(' Foo  bar ')).toBe('Foo Bar')
})

test('capitalize', () => {
  expect(capitalize('foo')).toBe('Foo')
  expect(capitalize('foo bar')).toBe('Foo bar')
  expect(capitalize('foo Bar')).toBe('Foo bar')
  expect(capitalize('foo Bar', false)).toBe('Foo Bar')
  expect(capitalize('Foo')).toBe('Foo')
  expect(capitalize('f')).toBe('F')
  expect(capitalize('')).toBe('')
})
